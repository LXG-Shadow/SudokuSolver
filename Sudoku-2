import time,os

count = 0

class sudoku:
    val2num = {2 ** 0: 1, 2 ** 1: 2, 2 ** 2: 3, 2 ** 3: 4, 2 ** 4: 5, 2 ** 5: 6, 2 ** 6: 7, 2 ** 7: 8, 2 ** 8: 9, 0: 0}

    @staticmethod
    def printBin(blocks):
        for y in range(0, 9):
            for x in range(0, 9):
                print("{:0>9}".format(bin(blocks[sudoku.getIndex(x, y)])[2::]), end=" ")
            print()

    @staticmethod
    def print(blocks):
        print("-" * 100,count)
        for y in range(0, 9):
            for x in range(0, 9):
                print("{:>2}".format(sudoku.val2num[blocks[sudoku.getIndex(x, y)]]), end=" ")
            print()
        print("-" * 100)

    @staticmethod
    def initFromInput():
        blocks = []
        for i in range(0, 9, 1):
            a = input()
            for b in a[0:17:2]:
                c = int(b)
                if c == 0:
                    blocks.append(0)
                else:
                    blocks.append(2 ** (c - 1))
        return blocks

    @staticmethod
    def getXY(index):
        return index % 9, index // 9

    @staticmethod
    def getIndex(x, y):
        return y * 9 + x

    @staticmethod
    def getYGroup(y):
        return [y * 9 + i for i in range(0, 9)]

    @staticmethod
    def getXGrouop(x):
        return [x + 9 * i for i in range(0, 9)]

    @staticmethod
    def getBlockGroup(x, y):
        newx = x if x % 3 == 1 else x + 1 if (x + 1) % 3 == 1 else x - 1
        newy = y if y % 3 == 1 else y + 1 if (y + 1) % 3 == 1 else y - 1
        return [sudoku.getIndex(newx + dx, newy + dy) for dx in range(-1, 2) for dy in range(-1, 2)]

    @staticmethod
    def getNearby(index):
        x, y = sudoku.getXY(index)
        return [i for i in sudoku.getYGroup(y) + sudoku.getXGrouop(x) + sudoku.getBlockGroup(x, y) if i != index]

    @staticmethod
    def solve(blocks, index):
        if index == 81:
            sudoku.print(blocks)
            return
        if blocks[index] != 0:
            return sudoku.solve(blocks, index + 1)
        possible = 0
        for p in sudoku.getNearby(index):
            possible = possible | blocks[p]
        possible = possible ^ 511
        if possible == 0:
            return
        for d in range(0, 9):
            if ((possible >> d) ^ 1) < (possible >> d):
                blocks[index] = 2 ** d
                sudoku.solve(blocks, index + 1)
                blocks[index] = 0

a = sudoku.initFromInput()
t1 = time.time()
sudoku.solve(a, 0)
print(time.time() - t1)
